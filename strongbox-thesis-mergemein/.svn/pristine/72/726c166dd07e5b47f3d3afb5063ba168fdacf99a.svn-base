\chapter{Introduction}\label{sec:introduction}

Full disk encryption (FDE) is an essential technique for protecting the
privacy of data at rest. For mobile devices, maintaining data privacy
is especially important as these devices contain sensitive personal
and financial data yet are easily lost or stolen.  The current
standard for securing data on such devices is to use the AES cipher in
XTS mode~\cite{XTS, NISTXTS}.  Unfortunately, employing AES-XTS increases
read/write latency by 3--5$\times$ compared to unencrypted storage.

It is well known that authenticated encryption using \emph{stream} ciphers, such as
ChaCha20~\cite{ChaCha20}, can be faster than using AES (see \secref{motivation}). Indeed
in 2014, Google made the case for stream ciphers over AES, switching HTTPS connections on
Chrome for Android to use a stream cipher for better performance~\cite{google-blog}.
Stream ciphers are not used for full disk encryption, however, because when applied
naively, they are trivially vulnerable to \emph{many-time pad attacks} and \emph{rollback
attacks} that can reveal the plaintext. Furthermore, it has been assumed that full disk
encryption should be transparent and length-preserving (\ie{} that every sector should be
encrypted independently and no extra space should be reserved for MAC tags)~\cite{XTS}
because doing otherwise would ruin performance. Thus, the conventional wisdom is that
full disk encryption necessarily incurs the overhead of AES-XTS or a similar primitive.

In this paper, we argue that two technological shifts in mobile devices overturn this
conventional wisdom and make it possible to use fast stream ciphers for disk encryption.
First, mobile devices commonly use Log-structured File Systems
(LFSes)~\cite{LFS,F2FS,NILFS} to increase the lifetime of their solid-state drives
(SSDs). Second, modern mobile devices like smartphones now come equipped with trusted
hardware, such as Trusted Execution Environments (TEEs)~\cite{TEE,TrustZone}, and secure
storage areas~\cite{eMMC-standard}. The use of LFSes means that overwrites to the same disk sectors
will be limited, with most writes simply appended to a log. Having fewer overwrites
dramatically improves the performance of using stream ciphers, which require an expensive
re-key on every overwrite. The presence of secure hardware means that disk encryption
modules have access to persistent, monotonically increasing counters that can be used to
prevent rollback attacks.

Given these trends, we propose \SYSTEM{}, a new method for securing data at rest designed as a
drop-in replacement for AES-XTS-backed FDE providers such as dm-crypt~\cite{dmcrypt};
\ie{} it requires no interface changes. \SYSTEM{} combines authenticated encryption based
on a fast stream cipher with a secure, persistent counter---supported by existing
mobile hardware---to prevent rollback attacks. The challenge of building \SYSTEM{} is
that even with Log-structured File Systems running on or above SSDs, blocks will
occasionally be overwritten; \eg{} by segment cleaning or \emph{garbage collection} in
the LFS. \emph{Thus, \SYSTEM{}'s main contribution is a system design and a set of
on-disk data structures that enable secure disk encryption with a stream cipher without
compromising performance.}

We demonstrate \SYSTEM{}'s effectiveness by implementing it on a mobile ARM
big.LITTLE system---a Samsung Exynos Octa 5---running Ubuntu Trusty 14.04 LTS,
kernel 3.10.58. We use ChaCha20~\cite{ChaCha20} as our chosen stream cipher and
Poly1305~\cite{Poly1305} as our chosen MAC algorithm.  As \SYSTEM{} requires no
change to any existing interfaces, we benchmark it on two of the most popular
LFSes: NILFS~\cite{NILFS} and F2FS~\cite{F2FS}. We compare the performance of
these systems on top of AES-XTS (via dm-crypt) and \SYSTEM{}. Additionally, we
compare to the performance of AES-XTS encrypted Ext4 filesystems with \SYSTEM{}.
Our results show:

\begin{itemize}
\item \emph{Improved read performance:} \SYSTEM{} provides decreased
  read latencies across all tested filesystems in the majority of
  benchmarks when compared to dm-crypt; \ie under F2FS, \SYSTEM{}
  provides a $1.6\times$ speedup over AES-XTS.

\item \emph{Equivalent write performance:} despite having to maintain
  more metadata than FDE schemes based on AES-XTS, \SYSTEM{} achieves
  near parity or provides an improvement in observed write latencies
  in the majority of benchmarks; \ie under F2FS, \SYSTEM{} provides a
  $1.2\times$ speedup over AES-XTS.

\end{itemize}

\SYSTEM{} achieves these performance gains while providing a stronger integrity guarantee
than AES-XTS. Whereas XTS mode only hopes to randomize plaintext when the ciphertext is
altered~\cite{XTS}, \SYSTEM{} provides the chosen message attack security of standard
authenticated encryption. The remaining sections of this paper motivate the use of stream
ciphers in greater detail, present \SYSTEM{}'s design, argue for its security, and
empirically evaluate its performance in comparison with the state-of-the-art. In
addition, \SYSTEM{}'s implementation will be made
available.\footnote{https://github.com/ananonrepo2/StrongBox}


