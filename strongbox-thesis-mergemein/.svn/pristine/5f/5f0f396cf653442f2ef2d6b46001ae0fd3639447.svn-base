\chapter{Motivation} \label{sec:motivation}

The section reviews the two main motivations for \SYSTEM{}: the
relative speed of stream ciphers compared to AES-XTS and the
append-mostly nature of Log-structured File Systems. We then describe
the challenges of replacing AES with a stream cipher.

\section{Performance Potential}

We demonstrate the potential performance win from switching to a stream cipher
by comparing AES-XTS to ChaCha20+Poly1305.  We use an Exynos Octa processor with
an ARM big.LITTLE architecture (the same processor used in the Samsung Galaxy
line of phones).  We encrypt and then decrypt 250MB of randomly generated bits 3
times and take the median time for each of encryption and decryption.
\figref{motivation} shows the distinct advantage of the stream cipher over AES
---a consistent $2.7\times$ reduction in run time.

\begin{figure}[t]
  \centering
  \input{img/heuristics-time.tex}
\caption{AES-XTS and ChaCha20+Poly1305 Comparison.}
\label{fig:motivation}
\end{figure}

\section{Append-mostly Filesystems}
Of course, stream ciphers are not designed to encrypt data at rest.
If we naively implement block device encryption with a stream cipher,
overwriting the same memory location with the same key would allow an
attacker to trivially recover the secret key.  Thus we believe stream
ciphers are best suited for encrypting block devices backing
Log-structured File Systems, as these filesystems are designed to
append data to the end of a log rather than over-write data.  In
practice, some overwrites occur; \eg{} in metadata, but they are small
in number during normal execution.

To demonstrate this fact, we write 800MB of random data directly to
backing store using four different file systems: Ext4, LogFS, NILFS,
and F2FS.  We count the number of total writes to the underlying block
device and the number of times data is overwritten for each file
system.


\begin{table}[th]
%\begin{wraptable}{r}{4cm}
\caption{File System Overwrite Behavior}
\label{tbl:overwrites}
\footnotesize
\centering
\begin{tabular}{lrr} 
  \textbf{File System} & \textbf{Total Write Ops} & \textbf{Overwrites}  \\
  \hline
  \hline
  ext4    &  16,756 & 10,787\\
  LogFS   &   4,244 &     32\\
  NILFS   &   4,199 &     24\\
  F2FS    &   2.107 &      2\\
  \hline 
  \hline
\end{tabular}
%\vskip -.7em
%\end{wraptable}
\end{table}

\tblref{overwrites} shows the data for this experiment.  Ext4 has the
highest number of writes, but many of those are small writes for
book-keeping purposes.  Ext4 also has the largest number of
overwrites, almost 65\% of the writes are to a previously written
location in the backing store.  In contrast, all three log-structured
file systems have very few overwrites.

\section{Threat Model}

The above data motivates our approach of using a stream cipher to
perform full disk encryption underneath Log-structured File Systems.
The stream cipher is more than twice as fast as AES-XTS.  The problem
with the stream cipher is that it is not secure if the same key is
used to overwrite the same storage location.  Fortunately, under
normal operation, the log-structured file systems rarely overwrite the
same location.

We cannot, however, ignore the fact that overwrites do occur.  The
data in this section shows that overwrites are rare during normal
operation.  We also know they will be common when garbage collecting
the Log-structured File System.  Thus, we will need some metadata to
help us track writes and ensure that data is re-keyed if overwrites
occur.  Therefore, we recognize three challenges to replacing AES with
ChaCha20 for full disk encryption:

\begin{itemize}
\item Tracking writes to the block device to ensure that the same
  location is never overwritten with the same key.
\item Ensuring that the metadata that tracks writes is secure and is
  not subject to side channel leaks or rollback attacks.
\item Accomplishing the above efficiently so that we maintain the
  performance advantage of the stream cipher.
\end{itemize}

The key to our approach is using a secure, persistent counter supported in
modern mobile hardware; \eg{} for limited password entry attempts.  The
intuition is that this counter can be used to track writes, and thus
\emph{versions} of the encrypted data.  If an attacker tried to \emph{roll back}
the file system to overwrite the same location with the same key, our system
would detect that the local version number is out of sync with the global
version number stored in the secure counter, \SYSTEM{} would refuse to
initialize, and the attack would fail. The use of the hardware-supported secure
counter significantly raises the bar when it comes to rollback attacks,
requiring a costly and non-discrete physical attack on the hardware itself to be
effective. The actual structure of the metadata required to track writes and
maintain integrity is significantly more complicated than simply implementing a
counter and is the subject of the next section.
